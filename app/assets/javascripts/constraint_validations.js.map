{"version":3,"file":"constraint_validations.js","sources":["../../javascript/constraint_validations/util.js","../../javascript/constraint_validations/validators/checkbox_validator.js","../../javascript/constraint_validations/index.js"],"sourcesContent":["export function isFieldElement(element) {\n  return !element.disabled && \"validity\" in element && element.willValidate\n}\n\nexport function isAriaInvalid(element) {\n  return element.getAttribute(\"aria-invalid\") === \"true\"\n}\n\nexport function readValidationMessages(input) {\n  try {\n    return JSON.parse(input.getAttribute(\"data-validation-messages\")) || {}\n  } catch(_) {\n    return {}\n  }\n}\n","import { isAriaInvalid, isFieldElement, readValidationMessages } from \"../util\"\n\nexport default class {\n  selector = \"input[type=checkbox]\"\n  ignoringMutations = false\n\n  constructor(constraintValidations, predicate) {\n    this.constraintValidations = constraintValidations\n    this.mutationObserver = new MutationObserver(this.handleMutation)\n    this.enabled = typeof predicate === \"function\" ?\n      predicate :\n      (group) => !!predicate\n  }\n\n  connect() {\n    this.element.addEventListener(\"invalid\", this.handleInvalid, { capture: true, passive: true })\n    this.mutationObserver.observe(this.element, {\n      attributeFilter: [\"required\"],\n      childList: true,\n      subtree: true\n    })\n    this.reportValidationMessages(this.element.querySelectorAll(this.selector), isAriaInvalid)\n  }\n\n  disconnect() {\n    this.element.removeEventListener(\"invalid\", this.handleInvalid, { capture: true, passive: true })\n    this.mutationObserver.disconnect()\n  }\n\n  willValidate(target) {\n    return this.willValidateGroup(checkboxGroup(target))\n  }\n\n  validate(target) {\n    const checkboxesInGroup = checkboxGroup(target).filter(isCheckboxElement)\n    const allRequired = checkboxesInGroup.every((checkbox) => isRequired(checkbox))\n    const someChecked = checkboxesInGroup.some((checkbox) => checkbox.checked)\n\n    if (allRequired && someChecked) {\n      for (const checkbox of checkboxesInGroup) {\n        this.constraintValidations.clearValidity(checkbox)\n      }\n    } else if (allRequired) {\n      for (const checkbox of checkboxesInGroup) {\n        const validationMessages = readValidationMessages(checkbox)\n\n        checkbox.setCustomValidity(validationMessages.valueMissing)\n        this.constraintValidations.reportValidity(checkbox)\n      }\n    }\n  }\n\n  // Private\n\n  handleInvalid = ({ target }) => {\n    const checkboxes = new Set\n\n    for (const element of target.form.elements) {\n      if (isCheckboxElement(element) && this.willValidate(element)) {\n        checkboxes.add(element)\n      }\n    }\n\n    this.reportValidationMessages(checkboxes)\n  }\n\n  handleMutation = (mutationRecords) => {\n    if (this.ignoringMutations) return\n\n    for (const { addedNodes, target, type } of mutationRecords) {\n      if (type === \"attributes\") {\n        if (target.required) {\n          this.swapRequiredWithAriaRequired(target)\n        } else {\n          target.removeAttribute(\"aria-required\")\n        }\n      } else if (addedNodes.length) {\n        this.reportValidationMessages(addedNodes, isAriaInvalid)\n      }\n    }\n  }\n\n  reportValidationMessages(nodes, willReport = () => true) {\n    const requiredCheckboxes = querySelectorAllNodes(this.selector, nodes)\n\n    for (const checkbox of requiredCheckboxes) {\n      if (isRequired(checkbox)) {\n        const group = checkboxGroup(checkbox)\n\n        if (this.willValidateGroup(group)) {\n          for (const checkboxInGroup of group) {\n            this.swapRequiredWithAriaRequired(checkboxInGroup)\n\n            if (willReport(checkboxInGroup)) {\n              this.validate(checkboxInGroup)\n            }\n          }\n        }\n      }\n    }\n  }\n\n  swapRequiredWithAriaRequired(element) {\n    this.ignoringMutations = true\n    element.required = false\n    element.setAttribute(\"aria-required\", \"true\")\n    setTimeout(() => this.ignoringMutations = false, 0)\n  }\n\n  willValidateGroup(group) {\n    return group.length > 0 && this.enabled(group)\n  }\n\n  get element() {\n    return this.constraintValidations.element\n  }\n}\n\nfunction checkboxGroup(formControl) {\n  const results = new Set\n  const { name, form } = formControl\n\n  if (name && form instanceof HTMLFormElement) {\n    const group = form.elements.namedItem(name)\n    const elements = Symbol.iterator in group ?\n      group :\n      [group]\n\n    for (const element of elements) {\n      if (element.type === \"checkbox\") {\n        results.add(element)\n      }\n    }\n\n    if (results.size === 1 && results.has(formControl)) {\n      results.clear()\n    }\n  }\n\n  return Array.from(results)\n}\n\nfunction querySelectorAllNodes(selector, nodes, elements = new Set) {\n  for (const node of nodes) {\n    if (node instanceof Element) {\n      if (node.matches(selector)) {\n        elements.add(node)\n      }\n\n      elements.add(...querySelectorAllNodes(selector, node.children, elements))\n    }\n  }\n\n  return Array.from(elements)\n}\n\nfunction isCheckboxElement(element) {\n  return isFieldElement(element) && element.type === \"checkbox\"\n}\n\nfunction isRequired(element) {\n  return element.required || element.getAttribute(\"aria-required\") === \"true\"\n}\n","import { isAriaInvalid, isFieldElement, readValidationMessages } from \"./util\"\nimport CheckboxValidator from \"./validators/checkbox_validator\"\n\nconst defaultOptions = {\n  disableSubmitWhenInvalid: false,\n  validateOn: [\"blur\", \"input\"],\n  validators: {\n    checkbox: false\n  }\n}\n\nexport default class ConstraintValidations {\n  static connect(element = document, options = {}) {\n    new this(element, options).connect()\n  }\n\n  constructor(element = document, options = {}) {\n    this.element = element\n    this.options = { ...defaultOptions, ...options }\n    this.validators = [\n      new CheckboxValidator(this, this.options.validators.checkbox)\n    ]\n  }\n\n  connect() {\n    this.validators.forEach(validator => validator.connect())\n    this.element.addEventListener(\"invalid\", this.reportFieldValidity, { capture: true, passive: false })\n\n    for (const eventName of this.options.validateOn) {\n      this.element.addEventListener(eventName, this.clearAndReportFieldValidity, { capture: true, passive: true })\n    }\n\n    this.element.addEventListener(\"input\", this.toggleSubmitsDisabled)\n\n    this.reportValidationMessages(\n      this.element instanceof HTMLFormElement ?\n        [this.element] :\n        this.element.querySelectorAll(\"form\")\n    )\n  }\n\n  disconnect() {\n    this.element.removeEventListener(\"invalid\", this.reportFieldValidity, { capture: true, passive: false })\n\n    for (const eventName of this.options.validateOn) {\n      this.element.removeEventListener(eventName, this.clearAndReportFieldValidity, { capture: true, passive: true })\n    }\n\n    this.element.removeEventListener(\"input\", this.toggleSubmitsDisabled)\n    this.validators.forEach(validator => validator.disconnect())\n  }\n\n  reportFieldValidity = (event) => {\n    if (isFieldElement(event.target) && this.reportValidity(event.target)) {\n      event.preventDefault()\n\n      focusFirstInvalidField(event.target.form || event.target)\n    }\n  }\n\n  clearAndReportFieldValidity = ({ target }) => {\n    if (isFieldElement(target)) {\n      this.clearValidity(target)\n\n      for (const validator of this.validators) {\n        if (validator.willValidate(target)) {\n          validator.validate(target)\n        }\n      }\n\n      this.reportValidity(target)\n    }\n  }\n\n  toggleSubmitsDisabled = ({ target }) => {\n    if (isFieldElement(target) && this.willDisableSubmitWhenInvalid(target)) {\n      disableSubmitWhenInvalid(target.form)\n    }\n  }\n\n  reportValidationMessages(forms) {\n    const invalidFields = []\n\n    for (const form of forms) {\n      for (const element of Array.from(form.elements).filter(isFieldElement)) {\n        const serverRenderedInvalid = isAriaInvalid(element)\n        const id = element.getAttribute(\"aria-errormessage\")\n        const errorMessageElement = document.getElementById(id)\n        const validationMessage = errorMessageElement?.textContent\n\n        if (validationMessage) {\n          element.setCustomValidity(validationMessage)\n        }\n\n        if (validationMessage || serverRenderedInvalid) {\n          this.reportValidity(element)\n          invalidFields.push(element)\n        }\n\n        if (this.willDisableSubmitWhenInvalid(element)) {\n          disableSubmitWhenInvalid(form)\n        }\n      }\n    }\n\n    const [firstInvalidField] = invalidFields\n    firstInvalidField?.focus()\n  }\n\n  willDisableSubmitWhenInvalid(target) {\n    return typeof this.options.disableSubmitWhenInvalid === \"function\" ?\n      this.options.disableSubmitWhenInvalid(target) :\n      !!this.options.disableSubmitWhenInvalid\n  }\n\n  clearValidity(input) {\n    input.setCustomValidity(\"\")\n\n    this.reportValidity(input)\n  }\n\n  reportValidity(input) {\n    const id = input.getAttribute(\"aria-errormessage\")\n    const validationMessage = getValidationMessage(input)\n    const element = document.getElementById(id) || createValidationMessageFragment(input.form)\n\n    if (input.form?.noValidate) {\n      return false\n    } else if (id && element) {\n      element.id = id\n      element.innerHTML = validationMessage\n\n      if (validationMessage) {\n        input.setCustomValidity(validationMessage)\n        input.setAttribute(\"aria-describedby\", id)\n        input.setAttribute(\"aria-invalid\", \"true\")\n      } else {\n        input.removeAttribute(\"aria-describedby\")\n        input.removeAttribute(\"aria-invalid\")\n      }\n\n      if (!element.parentElement) {\n        input.insertAdjacentElement(\"afterend\", element)\n      }\n\n      if (input.form && this.willDisableSubmitWhenInvalid(input)) disableSubmitWhenInvalid(input.form)\n\n      return true\n    } else {\n      return false\n    }\n  }\n}\n\nfunction focusFirstInvalidField(element) {\n  if (element instanceof HTMLFormElement) {\n    return Array.from(element.elements).some(field => focusFirstInvalidField(field))\n  } else if (isFieldElement(element) && !element.validity.valid) {\n    element.focus()\n    element.scrollIntoView()\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction disableSubmitWhenInvalid(form) {\n  if (!form || form.noValidate) return\n\n  const isValid = Array.from(form.elements).filter(isFieldElement).every(input => input.validity.valid)\n\n  for (const element of form.elements) {\n    if (element.type == \"submit\" && !element.formNoValidate) {\n      element.disabled = !isValid\n    }\n  }\n}\n\nfunction createValidationMessageFragment(form) {\n  if (form) {\n    const template = form.querySelector(\"[data-validation-message-template]\")\n\n    return template?.content.children[0].cloneNode()\n  }\n}\n\nfunction getValidationMessage(input) {\n  const validationMessages = Object.entries(readValidationMessages(input))\n\n  const [ _, validationMessage ] = validationMessages.find(([ key ]) => input.validity[key]) || [ null, null ]\n\n  return validationMessage || input.validationMessage\n}\n"],"names":["isFieldElement","element","disabled","willValidate","isAriaInvalid","getAttribute","readValidationMessages","input","JSON","parse","_","[object Object]","constraintValidations","predicate","this","mutationObserver","MutationObserver","handleMutation","enabled","group","addEventListener","handleInvalid","capture","passive","observe","attributeFilter","childList","subtree","reportValidationMessages","querySelectorAll","selector","removeEventListener","disconnect","target","willValidateGroup","checkboxGroup","checkboxesInGroup","filter","isCheckboxElement","allRequired","every","checkbox","isRequired","someChecked","some","checked","clearValidity","validationMessages","setCustomValidity","valueMissing","reportValidity","checkboxes","Set","form","elements","add","mutationRecords","ignoringMutations","addedNodes","type","required","swapRequiredWithAriaRequired","removeAttribute","length","nodes","willReport","requiredCheckboxes","querySelectorAllNodes","checkboxInGroup","validate","setAttribute","setTimeout","formControl","results","name","HTMLFormElement","namedItem","Symbol","iterator","size","has","clear","Array","from","node","Element","matches","children","defaultOptions","disableSubmitWhenInvalid","validateOn","validators","ConstraintValidations","document","options","connect","CheckboxValidator","forEach","validator","reportFieldValidity","eventName","clearAndReportFieldValidity","toggleSubmitsDisabled","event","preventDefault","focusFirstInvalidField","willDisableSubmitWhenInvalid","forms","invalidFields","serverRenderedInvalid","id","errorMessageElement","getElementById","validationMessage","textContent","push","firstInvalidField","focus","getValidationMessage","createValidationMessageFragment","noValidate","innerHTML","parentElement","insertAdjacentElement","field","validity","valid","scrollIntoView","isValid","formNoValidate","template","querySelector","content","cloneNode","Object","entries","find","key"],"mappings":"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"}
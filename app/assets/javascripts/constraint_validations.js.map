{"version":3,"file":"constraint_validations.js","sources":["../../javascript/constraint_validations/index.js"],"sourcesContent":["const defaultOptions = {\n  disableSubmitWhenInvalid: false,\n  validateOn: [\"blur\", \"input\"],\n}\n\nexport default class ConstraintValidations {\n  static connect(element = document, options = {}) {\n    new this(element, options).connect()\n  }\n\n  constructor(element = document, options = {}) {\n    this.element = element\n    this.options = { ...defaultOptions, ...options }\n  }\n\n  connect() {\n    this.element.addEventListener(\"invalid\", this.reportFieldValidity, { capture: true, passive: false })\n\n    for (const eventName of this.options.validateOn) {\n      this.element.addEventListener(eventName, this.clearAndReportFieldValidity, { capture: true, passive: true })\n    }\n\n    this.element.addEventListener(\"input\", this.toggleSubmitsDisabled)\n\n    this.reportValidationMessages(\n      this.element instanceof HTMLFormElement ?\n        [this.element] :\n        Array.from(this.element.querySelectorAll(\"form\"))\n    )\n  }\n\n  disconnect() {\n    this.element.removeEventListener(\"invalid\", this.reportFieldValidity, { capture: true, passive: false })\n\n    for (const eventName of this.options.validateOn) {\n      this.element.removeEventListener(eventName, this.clearAndReportFieldValidity, { capture: true, passive: true })\n    }\n\n    this.element.removeEventListener(\"input\", this.toggleSubmitsDisabled)\n  }\n\n  reportFieldValidity = (event) => {\n    if (isFieldElement(event.target) && this.reportValidity(event.target)) {\n      event.preventDefault()\n\n      focusFirstInvalidField(event.target.form || event.target)\n    }\n  }\n\n  clearAndReportFieldValidity = ({ target }) => {\n    if (isFieldElement(target)) {\n      this.clearValidity(target)\n      this.reportValidity(target)\n    }\n  }\n\n  toggleSubmitsDisabled = ({ target }) => {\n    if (isFieldElement(target) && this.willDisableSubmitWhenInvalid(target)) {\n      disableSubmitWhenInvalid(target.form)\n    }\n  }\n\n  reportValidationMessages(forms) {\n    const invalidFields = []\n\n    for (const form of forms) {\n      for (const element of Array.from(form.elements).filter(isFieldElement)) {\n        const serverRenderedInvalid = /true/i.test(element.getAttribute(\"aria-invalid\"))\n        const id = element.getAttribute(\"aria-errormessage\")\n        const errorMessageElement = document.getElementById(id)\n        const validationMessage = errorMessageElement?.textContent\n\n        if (serverRenderedInvalid && this.reportValidity(element)) {\n          invalidFields.push(element)\n        }\n\n        if (validationMessage) {\n          element.setCustomValidity(validationMessage)\n        }\n\n        if (this.willDisableSubmitWhenInvalid(element)) {\n          disableSubmitWhenInvalid(form)\n        }\n      }\n    }\n\n    const [firstInvalidField] = invalidFields\n    firstInvalidField?.focus()\n  }\n\n  willDisableSubmitWhenInvalid(target) {\n    return typeof this.options.disableSubmitWhenInvalid === \"function\" ?\n      this.options.disableSubmitWhenInvalid(target) :\n      !!this.options.disableSubmitWhenInvalid\n  }\n\n  clearValidity(input) {\n    input.setCustomValidity(\"\")\n\n    this.reportValidity(input)\n  }\n\n  reportValidity(input) {\n    const id = input.getAttribute(\"aria-errormessage\")\n    const validationMessage = getValidationMessage(input)\n    const element = document.getElementById(id) || createValidationMessageFragment(input.form)\n\n    if (input.form?.noValidate) {\n      return false\n    } else if (id && element) {\n      element.id = id\n      element.innerHTML = validationMessage\n\n      if (validationMessage) {\n        input.setCustomValidity(validationMessage)\n        input.setAttribute(\"aria-describedby\", id)\n        input.setAttribute(\"aria-invalid\", \"true\")\n      } else {\n        input.removeAttribute(\"aria-describedby\")\n        input.removeAttribute(\"aria-invalid\")\n      }\n\n      if (!element.parentElement) {\n        input.insertAdjacentElement(\"afterend\", element)\n      }\n\n      if (input.form && this.willDisableSubmitWhenInvalid(input)) disableSubmitWhenInvalid(input.form)\n\n      return true\n    } else {\n      return false\n    }\n  }\n}\n\nfunction focusFirstInvalidField(element) {\n  let firstInvalidField\n\n  if (element instanceof HTMLFormElement) {\n    for (const field of element.elements) {\n      if (field.validity.valid) {\n        continue\n      } else {\n        firstInvalidField = field\n        break\n      }\n    }\n  } else if (\"validity\" in element && !element.validity.valid) {\n    firstInvalidField = element\n  }\n\n  firstInvalidField?.focus()\n}\n\nfunction disableSubmitWhenInvalid(form) {\n  if (!form || form.noValidate) return\n\n  const isValid = Array.from(form.elements).filter(isFieldElement).every(input => input.validity.valid)\n\n  for (const element of form.elements) {\n    if (element.type == \"submit\" && !element.formNoValidate) {\n      element.disabled = !isValid\n    }\n  }\n}\n\nfunction createValidationMessageFragment(form) {\n  if (form) {\n    const template = form.querySelector(\"[data-validation-message-template]\")\n\n    return template?.content.children[0].cloneNode()\n  }\n}\n\nfunction getValidationMessage(input) {\n  const validationMessages = Object.entries(readValidationMessages(input))\n\n  const [ _, validationMessage ] = validationMessages.find(([ key ]) => input.validity[key]) || [ null, null ]\n\n  return validationMessage || input.validationMessage\n}\n\nfunction readValidationMessages(input) {\n  try {\n    return JSON.parse(input.getAttribute(\"data-validation-messages\")) || {}\n  } catch(_) {\n    return {}\n  }\n}\n\nfunction isFieldElement(element) {\n  return [ HTMLButtonElement, HTMLInputElement, HTMLObjectElement, HTMLOutputElement, HTMLSelectElement, HTMLTextAreaElement ].some(field => element instanceof field)\n}\n"],"names":["defaultOptions","disableSubmitWhenInvalid","validateOn","ConstraintValidations","[object Object]","element","document","options","this","connect","addEventListener","reportFieldValidity","capture","passive","eventName","clearAndReportFieldValidity","toggleSubmitsDisabled","reportValidationMessages","HTMLFormElement","Array","from","querySelectorAll","removeEventListener","event","isFieldElement","target","reportValidity","preventDefault","focusFirstInvalidField","form","clearValidity","willDisableSubmitWhenInvalid","forms","invalidFields","elements","filter","serverRenderedInvalid","test","getAttribute","id","errorMessageElement","getElementById","validationMessage","textContent","push","setCustomValidity","firstInvalidField","focus","input","getValidationMessage","createValidationMessageFragment","noValidate","innerHTML","setAttribute","removeAttribute","parentElement","insertAdjacentElement","field","validity","valid","isValid","every","type","formNoValidate","disabled","template","querySelector","content","children","cloneNode","validationMessages","Object","entries","readValidationMessages","_","find","key","JSON","parse","HTMLButtonElement","HTMLInputElement","HTMLObjectElement","HTMLOutputElement","HTMLSelectElement","HTMLTextAreaElement","some"],"mappings":"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"}
{"version":3,"file":"constraint_validations.js","sources":["../../javascript/constraint_validations/util.js","../../javascript/constraint_validations/validators/checkbox_validator.js","../../javascript/constraint_validations/index.js"],"sourcesContent":["export function readValidationMessages(input) {\n  try {\n    return JSON.parse(input.getAttribute(\"data-validation-messages\")) || {}\n  } catch(_) {\n    return {}\n  }\n}\n","import { readValidationMessages } from \"../util\"\n\nexport default class {\n  ignoringMutations = false\n\n  constructor(constraintValidations, predicate) {\n    this.constraintValidations = constraintValidations\n    this.mutationObserver = new MutationObserver(this.handleMutation)\n    this.enabled = typeof predicate === \"function\" ?\n      predicate :\n      (group) => !!predicate\n  }\n\n  connect() {\n    this.mutationObserver.observe(this.element, {\n      attributeFilter: [\"required\"],\n      childList: true,\n      subtree: true\n    })\n    this.overrideNodes(this.element.querySelectorAll(\"input[type=checkbox][required]\"))\n  }\n\n  disconnect() {\n    this.mutationObserver.disconnect()\n  }\n\n  willValidate(target) {\n    return this.willValidateGroup(checkboxGroup(target))\n  }\n\n  willValidateGroup(group) {\n    return group.length > 0 && this.enabled(group)\n  }\n\n  validate(target) {\n    const checkboxesInGroup = checkboxGroup(target)\n    const allRequired = checkboxesInGroup.every((checkbox) => checkbox.getAttribute(\"aria-required\") === \"true\")\n    const someChecked = checkboxesInGroup.some((checkbox) => checkbox.checked)\n\n    if (allRequired && someChecked) {\n      for (const checkbox of checkboxesInGroup) {\n        this.constraintValidations.clearValidity(checkbox)\n      }\n    } else if (allRequired) {\n      for (const checkbox of checkboxesInGroup) {\n        const validationMessages = readValidationMessages(checkbox)\n\n        checkbox.setCustomValidity(validationMessages.valueMissing)\n        this.constraintValidations.reportValidity(checkbox)\n      }\n    }\n  }\n\n  handleMutation = (mutationRecords) => {\n    if (this.ignoringMutations) return\n\n    for (const { addedNodes, target, type } of mutationRecords) {\n      if (type === \"attributes\") {\n        if (target.required) {\n          this.swapRequiredWithAriaRequired(target)\n        } else {\n          target.removeAttribute(\"aria-required\")\n        }\n      } else if (addedNodes.length) {\n        this.overrideNodes(addedNodes)\n      }\n    }\n  }\n\n  overrideNodes(nodes) {\n    const requiredCheckboxes = querySelectorAllNodes(\"input[type=checkbox][required]\", nodes)\n\n    for (const checkbox of requiredCheckboxes) {\n      if (checkbox.required) {\n        const group = checkboxGroup(checkbox)\n\n        if (this.willValidateGroup(group)) {\n          for (const checkboxInGroup of group) {\n            this.swapRequiredWithAriaRequired(checkboxInGroup)\n            this.validate(checkboxInGroup)\n          }\n        }\n      }\n    }\n  }\n\n  swapRequiredWithAriaRequired(element) {\n    this.ignoringMutations = true\n    element.required = false\n    element.setAttribute(\"aria-required\", \"true\")\n    setTimeout(() => this.ignoringMutations = false, 0)\n  }\n\n  get element() {\n    return this.constraintValidations.element\n  }\n}\n\nfunction checkboxGroup(formControl) {\n  const results = new Set\n  const { name, form } = formControl\n\n  if (name && form instanceof HTMLFormElement) {\n    const group = form.elements.namedItem(name)\n    const elements = Symbol.iterator in group ?\n      group :\n      [group]\n\n    for (const element of elements) {\n      if (element.type === \"checkbox\") {\n        results.add(element)\n      }\n    }\n\n    if (results.size === 1 && results.has(formControl)) {\n      results.clear()\n    }\n  }\n\n  return Array.from(results)\n}\n\nfunction querySelectorAllNodes(selector, nodes, elements = new Set) {\n  for (const node of nodes) {\n    if (node instanceof Element) {\n      if (node.matches(selector)) {\n        elements.add(node)\n      }\n\n      elements.add(...querySelectorAllNodes(selector, node.children, elements))\n    }\n  }\n\n  return Array.from(elements)\n}\n","import { readValidationMessages } from \"./util\"\nimport CheckboxValidator from \"./validators/checkbox_validator\"\n\nconst defaultOptions = {\n  disableSubmitWhenInvalid: false,\n  validateOn: [\"blur\", \"input\"],\n  validators: {\n    checkbox: false\n  }\n}\n\nexport default class ConstraintValidations {\n  static connect(element = document, options = {}) {\n    new this(element, options).connect()\n  }\n\n  constructor(element = document, options = {}) {\n    this.element = element\n    this.options = { ...defaultOptions, ...options }\n    this.validators = [\n      new CheckboxValidator(this, this.options.validators.checkbox)\n    ]\n  }\n\n  connect() {\n    this.validators.forEach(validator => validator.connect())\n    this.element.addEventListener(\"invalid\", this.reportFieldValidity, { capture: true, passive: false })\n\n    for (const eventName of this.options.validateOn) {\n      this.element.addEventListener(eventName, this.clearAndReportFieldValidity, { capture: true, passive: true })\n    }\n\n    this.element.addEventListener(\"input\", this.toggleSubmitsDisabled)\n\n    this.reportValidationMessages(\n      this.element instanceof HTMLFormElement ?\n        [this.element] :\n        Array.from(this.element.querySelectorAll(\"form\"))\n    )\n  }\n\n  disconnect() {\n    this.element.removeEventListener(\"invalid\", this.reportFieldValidity, { capture: true, passive: false })\n\n    for (const eventName of this.options.validateOn) {\n      this.element.removeEventListener(eventName, this.clearAndReportFieldValidity, { capture: true, passive: true })\n    }\n\n    this.element.removeEventListener(\"input\", this.toggleSubmitsDisabled)\n    this.validators.forEach(validator => validator.disconnect())\n  }\n\n  reportFieldValidity = (event) => {\n    if (isFieldElement(event.target) && this.reportValidity(event.target)) {\n      event.preventDefault()\n\n      focusFirstInvalidField(event.target.form || event.target)\n    }\n  }\n\n  clearAndReportFieldValidity = ({ target }) => {\n    const validator = this.validators.find(validator => validator.willValidate(target))\n\n    if (validator) {\n      validator.validate(target)\n    } else if (isFieldElement(target)) {\n      this.clearValidity(target)\n      this.reportValidity(target)\n    }\n  }\n\n  toggleSubmitsDisabled = ({ target }) => {\n    if (isFieldElement(target) && this.willDisableSubmitWhenInvalid(target)) {\n      disableSubmitWhenInvalid(target.form)\n    }\n  }\n\n  reportValidationMessages(forms) {\n    const invalidFields = []\n\n    for (const form of forms) {\n      for (const element of Array.from(form.elements).filter(isFieldElement)) {\n        const serverRenderedInvalid = /true/i.test(element.getAttribute(\"aria-invalid\"))\n        const id = element.getAttribute(\"aria-errormessage\")\n        const errorMessageElement = document.getElementById(id)\n        const validationMessage = errorMessageElement?.textContent\n\n        if (validationMessage) {\n          element.setCustomValidity(validationMessage)\n        }\n\n        if (validationMessage || serverRenderedInvalid) {\n          this.reportValidity(element)\n          invalidFields.push(element)\n        }\n\n        if (this.willDisableSubmitWhenInvalid(element)) {\n          disableSubmitWhenInvalid(form)\n        }\n      }\n    }\n\n    const [firstInvalidField] = invalidFields\n    firstInvalidField?.focus()\n  }\n\n  willDisableSubmitWhenInvalid(target) {\n    return typeof this.options.disableSubmitWhenInvalid === \"function\" ?\n      this.options.disableSubmitWhenInvalid(target) :\n      !!this.options.disableSubmitWhenInvalid\n  }\n\n  clearValidity(input) {\n    input.setCustomValidity(\"\")\n\n    this.reportValidity(input)\n  }\n\n  reportValidity(input) {\n    const id = input.getAttribute(\"aria-errormessage\")\n    const validationMessage = getValidationMessage(input)\n    const element = document.getElementById(id) || createValidationMessageFragment(input.form)\n\n    if (input.form?.noValidate) {\n      return false\n    } else if (id && element) {\n      element.id = id\n      element.innerHTML = validationMessage\n\n      if (validationMessage) {\n        input.setCustomValidity(validationMessage)\n        input.setAttribute(\"aria-describedby\", id)\n        input.setAttribute(\"aria-invalid\", \"true\")\n      } else {\n        input.removeAttribute(\"aria-describedby\")\n        input.removeAttribute(\"aria-invalid\")\n      }\n\n      if (!element.parentElement) {\n        input.insertAdjacentElement(\"afterend\", element)\n      }\n\n      if (input.form && this.willDisableSubmitWhenInvalid(input)) disableSubmitWhenInvalid(input.form)\n\n      return true\n    } else {\n      return false\n    }\n  }\n}\n\nfunction focusFirstInvalidField(element) {\n  if (element instanceof HTMLFormElement) {\n    return Array.from(element.elements).some(field => focusFirstInvalidField(field))\n  } else if (isFieldElement(element) && !element.validity.valid) {\n    element.focus()\n    element.scrollIntoView()\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction disableSubmitWhenInvalid(form) {\n  if (!form || form.noValidate) return\n\n  const isValid = Array.from(form.elements).filter(isFieldElement).every(input => input.validity.valid)\n\n  for (const element of form.elements) {\n    if (element.type == \"submit\" && !element.formNoValidate) {\n      element.disabled = !isValid\n    }\n  }\n}\n\nfunction createValidationMessageFragment(form) {\n  if (form) {\n    const template = form.querySelector(\"[data-validation-message-template]\")\n\n    return template?.content.children[0].cloneNode()\n  }\n}\n\nfunction getValidationMessage(input) {\n  const validationMessages = Object.entries(readValidationMessages(input))\n\n  const [ _, validationMessage ] = validationMessages.find(([ key ]) => input.validity[key]) || [ null, null ]\n\n  return validationMessage || input.validationMessage\n}\n\nfunction isFieldElement(element) {\n  return !element.disabled && \"validity\" in element && element.willValidate\n}\n"],"names":["readValidationMessages","input","JSON","parse","getAttribute","_","[object Object]","constraintValidations","predicate","this","mutationObserver","MutationObserver","handleMutation","enabled","group","observe","element","attributeFilter","childList","subtree","overrideNodes","querySelectorAll","disconnect","target","willValidateGroup","checkboxGroup","length","checkboxesInGroup","allRequired","every","checkbox","someChecked","some","checked","clearValidity","validationMessages","setCustomValidity","valueMissing","reportValidity","mutationRecords","ignoringMutations","addedNodes","type","required","swapRequiredWithAriaRequired","removeAttribute","nodes","requiredCheckboxes","querySelectorAllNodes","checkboxInGroup","validate","setAttribute","setTimeout","formControl","results","Set","name","form","HTMLFormElement","elements","namedItem","Symbol","iterator","add","size","has","clear","Array","from","selector","node","Element","matches","children","defaultOptions","disableSubmitWhenInvalid","validateOn","validators","ConstraintValidations","document","options","connect","CheckboxValidator","forEach","validator","addEventListener","reportFieldValidity","capture","passive","eventName","clearAndReportFieldValidity","toggleSubmitsDisabled","reportValidationMessages","removeEventListener","event","isFieldElement","preventDefault","focusFirstInvalidField","find","willValidate","willDisableSubmitWhenInvalid","forms","invalidFields","filter","serverRenderedInvalid","test","id","errorMessageElement","getElementById","validationMessage","textContent","push","firstInvalidField","focus","getValidationMessage","createValidationMessageFragment","noValidate","innerHTML","parentElement","insertAdjacentElement","field","validity","valid","scrollIntoView","isValid","formNoValidate","disabled","template","querySelector","content","cloneNode","Object","entries","key"],"mappings":"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"}